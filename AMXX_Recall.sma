/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <cstrike>
#include <fakemeta>
#include <hamsandwich>
#include <xs>
#include <engine>
#include <fun>

#define PLUGIN "Recall"
#define VERSION "1.0"
#define AUTHOR "EDo"
#pragma compress 1
#define ID_RECALL (taskid - TASK_RECALL)
#define ID_RECALL_WAIT (taskid - TASK_RECALL_WAIT)
enum (+= 100)
{
	TASK_RECALL_WAIT = 2000,
	TASK_RECALL,
	
}
new recall_time, recall_timewait, g_udahpunya[33], Float:Vector
new g_recall[33], g_recall_wait[33],Float:Origin[33][3]
public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	RegisterHam(Ham_Spawn, "player", "fw_PlayerSpawn_Post", 1)
	recall_time = register_cvar("recall_time", "6.0")
	recall_timewait = register_cvar("recall_timewait", "30.0")
	register_concmd("get_recall","give_call")
	register_concmd("use_recall","cmd_Call")
	register_event("DeathMsg", "Death", "a")
	register_forward(FM_CmdStart, "fw_CmdStart")
}


public fw_PlayerSpawn_Post(id)
{
	// Not alive or didn't join a team yet
	if (!is_user_alive(id))
		return;
	pev(id, pev_origin, Origin[id])
	log_amx("-PLUGIN NAME: %s-",PLUGIN)
	log_amx("-----BY: %s----",AUTHOR)
}
public give_call(id)
{
	if(g_udahpunya[id])
	{
		client_print(id,print_chat,"plugin recall tidak aktif")
		g_udahpunya[id] = 0
	}
	else
	{
		client_print(id,print_chat,"plugin recall aktif")
		g_udahpunya[id] = 1
	}
}
public cmd_Call(id)
{
	
	if (!is_user_alive(id)) return PLUGIN_CONTINUE

	
	if (g_udahpunya[id] && !g_recall[id] && !g_recall_wait[id])
	{
		// set fastrun
		g_recall[id] = 1
		//draw_notice_skill(id,"RECALL",2)
		// task fastrun
		
		if (task_exists(id+TASK_RECALL)) remove_task(id+TASK_RECALL)
		set_task(get_pcvar_float(recall_time), "RemoveFastCall", id+TASK_RECALL)
		run_bartime(id, fnFloatToNum(get_pcvar_float(recall_time)))
		return PLUGIN_HANDLED
	}
	
	return PLUGIN_CONTINUE
}
public RemoveFastCall(taskid)
{
	new id = ID_RECALL

	g_recall[id] = 0
	set_pev(id, pev_origin, Origin[id])
	if (task_exists(taskid)) remove_task(taskid)

	g_recall_wait[id] = 1
	if (task_exists(id+TASK_RECALL_WAIT)) remove_task(id+TASK_RECALL_WAIT)
	set_task(get_pcvar_float(recall_timewait), "RemoveWaitFastCall", id+TASK_RECALL_WAIT)
}
public RemoveWaitFastCall(taskid)
{
	new id = ID_RECALL_WAIT
	//draw_notice_skill(id,"RECALL",1)
	g_recall_wait[id] = 0
	if (task_exists(taskid)) remove_task(taskid)
}

public fw_CmdStart(id, uc_handle, seed)
{
	if(!is_user_alive(id))
		return
	static CurButton; CurButton = get_uc(uc_handle, UC_Buttons)
	
	if((CurButton & IN_ATTACK) || (CurButton & IN_ATTACK2) || (CurButton & IN_JUMP))
	{
		reset_value(id)
		return
	}
	
	static Float:Velocity[3]
	pev(id, pev_velocity, Velocity); Vector = vector_length(Velocity)
	
	if(Vector != 0.0)
	{
		reset_value(id)
		return
	}
}

public Death()
{
	//new killer = read_data(1) 
	new victim = read_data(2) 	
	reset_value(victim)
	
}
reset_value(id)
{
	if (task_exists(id+TASK_RECALL)) remove_task(id+TASK_RECALL)
	if (task_exists(id+TASK_RECALL_WAIT)) remove_task(id+TASK_RECALL_WAIT)
	g_recall[id] = 0
	g_recall_wait[id] = 0
	
}

run_bartime(id, wait_time)
{
	message_begin(MSG_ONE, get_user_msgid("BarTime"), _, id)
	write_short(wait_time)
	message_end()
}
fnFloatToNum(Float:floatn)
{
	new str[64], num
	float_to_str(floatn, str, 63)
	num = str_to_num(str)
	
	return num
}

